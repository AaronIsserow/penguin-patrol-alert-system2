// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL;
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY;

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Add a functions property if it doesn't exist already
// This is a TypeScript workaround to allow us to call custom functions
if (!supabase.functions) {
  (supabase as any).functions = {
    invoke: async (functionName: string, options: any = {}) => {
      try {
        const response = await fetch(
          `${SUPABASE_URL}/functions/v1/${functionName}`,
          {
            method: options.method || 'POST',
            headers: {
              'Authorization': `Bearer ${SUPABASE_PUBLISHABLE_KEY}`,
              'Content-Type': 'application/json',
            },
            body: options.body ? JSON.stringify(options.body) : undefined,
          }
        );
        
        if (!response.ok) {
          return { data: null, error: await response.json() };
        }
        
        return { data: await response.json(), error: null };
      } catch (error) {
        return { data: null, error };
      }
    }
  };
}
